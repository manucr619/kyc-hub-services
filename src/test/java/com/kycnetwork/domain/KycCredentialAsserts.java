package com.kycnetwork.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class KycCredentialAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKycCredentialAllPropertiesEquals(KycCredential expected, KycCredential actual) {
        assertKycCredentialAutoGeneratedPropertiesEquals(expected, actual);
        assertKycCredentialAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKycCredentialAllUpdatablePropertiesEquals(KycCredential expected, KycCredential actual) {
        assertKycCredentialUpdatableFieldsEquals(expected, actual);
        assertKycCredentialUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKycCredentialAutoGeneratedPropertiesEquals(KycCredential expected, KycCredential actual) {
        assertThat(actual)
            .as("Verify KycCredential auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKycCredentialUpdatableFieldsEquals(KycCredential expected, KycCredential actual) {
        assertThat(actual)
            .as("Verify KycCredential relevant properties")
            .satisfies(a -> assertThat(a.getIssuedDate()).as("check issuedDate").isEqualTo(expected.getIssuedDate()))
            .satisfies(a -> assertThat(a.getExpiryDate()).as("check expiryDate").isEqualTo(expected.getExpiryDate()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a ->
                assertThat(a.getLevelOfVerification()).as("check levelOfVerification").isEqualTo(expected.getLevelOfVerification())
            )
            .satisfies(a -> assertThat(a.getSchemaVersion()).as("check schemaVersion").isEqualTo(expected.getSchemaVersion()))
            .satisfies(a -> assertThat(a.getCredentialHash()).as("check credentialHash").isEqualTo(expected.getCredentialHash()))
            .satisfies(a -> assertThat(a.getSignature()).as("check signature").isEqualTo(expected.getSignature()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKycCredentialUpdatableRelationshipsEquals(KycCredential expected, KycCredential actual) {
        assertThat(actual)
            .as("Verify KycCredential relationships")
            .satisfies(a -> assertThat(a.getIssuer()).as("check issuer").isEqualTo(expected.getIssuer()))
            .satisfies(a -> assertThat(a.getCustomer()).as("check customer").isEqualTo(expected.getCustomer()));
    }
}
