package com.kycnetwork.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class APIAuditLogAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAPIAuditLogAllPropertiesEquals(APIAuditLog expected, APIAuditLog actual) {
        assertAPIAuditLogAutoGeneratedPropertiesEquals(expected, actual);
        assertAPIAuditLogAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAPIAuditLogAllUpdatablePropertiesEquals(APIAuditLog expected, APIAuditLog actual) {
        assertAPIAuditLogUpdatableFieldsEquals(expected, actual);
        assertAPIAuditLogUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAPIAuditLogAutoGeneratedPropertiesEquals(APIAuditLog expected, APIAuditLog actual) {
        assertThat(actual)
            .as("Verify APIAuditLog auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAPIAuditLogUpdatableFieldsEquals(APIAuditLog expected, APIAuditLog actual) {
        assertThat(actual)
            .as("Verify APIAuditLog relevant properties")
            .satisfies(a -> assertThat(a.getEventTime()).as("check eventTime").isEqualTo(expected.getEventTime()))
            .satisfies(a -> assertThat(a.getAction()).as("check action").isEqualTo(expected.getAction()))
            .satisfies(a -> assertThat(a.getStatusCode()).as("check statusCode").isEqualTo(expected.getStatusCode()))
            .satisfies(a -> assertThat(a.getMessage()).as("check message").isEqualTo(expected.getMessage()))
            .satisfies(a -> assertThat(a.getSourceIP()).as("check sourceIP").isEqualTo(expected.getSourceIP()))
            .satisfies(a -> assertThat(a.getInitiatedBy()).as("check initiatedBy").isEqualTo(expected.getInitiatedBy()))
            .satisfies(a -> assertThat(a.getEndpointAccessed()).as("check endpointAccessed").isEqualTo(expected.getEndpointAccessed()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAPIAuditLogUpdatableRelationshipsEquals(APIAuditLog expected, APIAuditLog actual) {
        assertThat(actual)
            .as("Verify APIAuditLog relationships")
            .satisfies(a -> assertThat(a.getBank()).as("check bank").isEqualTo(expected.getBank()));
    }
}
