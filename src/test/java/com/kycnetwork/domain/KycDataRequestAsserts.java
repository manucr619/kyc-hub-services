package com.kycnetwork.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class KycDataRequestAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKycDataRequestAllPropertiesEquals(KycDataRequest expected, KycDataRequest actual) {
        assertKycDataRequestAutoGeneratedPropertiesEquals(expected, actual);
        assertKycDataRequestAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKycDataRequestAllUpdatablePropertiesEquals(KycDataRequest expected, KycDataRequest actual) {
        assertKycDataRequestUpdatableFieldsEquals(expected, actual);
        assertKycDataRequestUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKycDataRequestAutoGeneratedPropertiesEquals(KycDataRequest expected, KycDataRequest actual) {
        assertThat(actual)
            .as("Verify KycDataRequest auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKycDataRequestUpdatableFieldsEquals(KycDataRequest expected, KycDataRequest actual) {
        assertThat(actual)
            .as("Verify KycDataRequest relevant properties")
            .satisfies(a -> assertThat(a.getRequestRef()).as("check requestRef").isEqualTo(expected.getRequestRef()))
            .satisfies(a -> assertThat(a.getRequestDate()).as("check requestDate").isEqualTo(expected.getRequestDate()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getRequestPurpose()).as("check requestPurpose").isEqualTo(expected.getRequestPurpose()))
            .satisfies(a ->
                assertThat(a.getEncryptedResponseData()).as("check encryptedResponseData").isEqualTo(expected.getEncryptedResponseData())
            )
            .satisfies(a -> assertThat(a.getRespondedAt()).as("check respondedAt").isEqualTo(expected.getRespondedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKycDataRequestUpdatableRelationshipsEquals(KycDataRequest expected, KycDataRequest actual) {
        assertThat(actual)
            .as("Verify KycDataRequest relationships")
            .satisfies(a -> assertThat(a.getCustomer()).as("check customer").isEqualTo(expected.getCustomer()))
            .satisfies(a -> assertThat(a.getFromBank()).as("check fromBank").isEqualTo(expected.getFromBank()))
            .satisfies(a -> assertThat(a.getToBank()).as("check toBank").isEqualTo(expected.getToBank()))
            .satisfies(a -> assertThat(a.getConsent()).as("check consent").isEqualTo(expected.getConsent()));
    }
}
