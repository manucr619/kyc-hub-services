package com.kycnetwork.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class KycConsentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKycConsentAllPropertiesEquals(KycConsent expected, KycConsent actual) {
        assertKycConsentAutoGeneratedPropertiesEquals(expected, actual);
        assertKycConsentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKycConsentAllUpdatablePropertiesEquals(KycConsent expected, KycConsent actual) {
        assertKycConsentUpdatableFieldsEquals(expected, actual);
        assertKycConsentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKycConsentAutoGeneratedPropertiesEquals(KycConsent expected, KycConsent actual) {
        assertThat(actual)
            .as("Verify KycConsent auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKycConsentUpdatableFieldsEquals(KycConsent expected, KycConsent actual) {
        assertThat(actual)
            .as("Verify KycConsent relevant properties")
            .satisfies(a -> assertThat(a.getConsentToken()).as("check consentToken").isEqualTo(expected.getConsentToken()))
            .satisfies(a -> assertThat(a.getConsentGivenAt()).as("check consentGivenAt").isEqualTo(expected.getConsentGivenAt()))
            .satisfies(a -> assertThat(a.getExpiresAt()).as("check expiresAt").isEqualTo(expected.getExpiresAt()))
            .satisfies(a -> assertThat(a.getIsRevoked()).as("check isRevoked").isEqualTo(expected.getIsRevoked()))
            .satisfies(a -> assertThat(a.getRevokedAt()).as("check revokedAt").isEqualTo(expected.getRevokedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKycConsentUpdatableRelationshipsEquals(KycConsent expected, KycConsent actual) {
        assertThat(actual)
            .as("Verify KycConsent relationships")
            .satisfies(a -> assertThat(a.getCustomer()).as("check customer").isEqualTo(expected.getCustomer()))
            .satisfies(a -> assertThat(a.getIssuerBank()).as("check issuerBank").isEqualTo(expected.getIssuerBank()))
            .satisfies(a -> assertThat(a.getRecipientBank()).as("check recipientBank").isEqualTo(expected.getRecipientBank()));
    }
}
